:root {
	--mainColor:#eaeaea;
	--secondaryColor:#fff;

	--borderColor:#c1c1c1;

	--mainText:black;
	--secondaryText:#4b5156;

	--themeDotBorder:#000;
	--shadowBg:rgb(1,2,3,0.8);

	--previewShadow:#112358;
}

html, body {
	padding:0;
	margin:0;
}

h1, h2, h3, h4, h5, h6, strong {
	color:var(--mainText);
	font-family: serif;
}

p, li, span, label, input, textarea {
	color:var(--secondaryText);
	font-family:sans-serif;
}

a {
	text-decoration: none;
	color:#17a2b8;
}

ul {
	list-style: none;
}

h1 {font-size: 56px;}
h2 {font-size: 36px;}
h3 {font-size: 28px;}
h4 {font-size: 24px;}
h5 {font-size: 20px;}
h6 {font-size: 16px;}

.s1 {
	background-color: var(--mainColor);
	border-bottom: 1px solid var(--borderColor);
	overflow: auto;
}

.s2 {
	background-color: var(--secondaryColor);
	border-bottom: 1px solid var(--borderColor);
	overflow:auto;
}

.main-container {
	width:1200px;
	margin:0 auto;
}

.greeting-wrapper {
	display:grid;

	justify-content: center;	/*centers content on inline-axis / x-axis*/
	align-content: center;		/*centers content on "block" axis / y-axis*/
	border:2px dashed lightcoral;
	min-height: 20em;

}

.intro-wrapper {
	background-color: var(--secondaryColor);
	border-radius: 5px 5px 0 0;
	border: 1px solid var(--borderColor);

	-webkit-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
-moz-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);
box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.75);

/* if you want to create a shadow on any box, just google "css shadow gen", copy and paste, like I did here.*/

	display: grid;
	grid-template-columns: 1fr 1fr;   /* fr is a fractional unit.  1fr = the whole space.  1fr 1fr = the whole space divided into two parts.  1fr 2fr = you get the picture.  1fr is a flexible unit.  it is one fraction of the available space.*/
	grid-template-areas:  /* this is a picture, using the named items from below!*/
		'nav-wrapper nav-wrapper'
		'left-column right-column';


}

.nav-wrapper {
	grid-area: nav-wrapper;  /* this assigns a name to the grid item.  Named grid items can be referred to by the grid-template-areas property of the grid container.*/
	border-bottom: 1px solid var(--borderColor);
	display: flex;
	justify-content: space-between;
	align-items: center;  	/* centers them in cross-axis, just like justify-content aligns along main axis.  which axis is which changes if you set "flex-direction: column" */
	background-color: var(--mainColor);
	border-radius: 5px 5px 0 0;
}

#navigation{
	margin: 0;
	padding: 10px;
}

#navigation li{
	display: inline-block; /*like inline, but allows you to set height and width*/
	margin-right: 5px;
	margin-left: 5px;
}

.dots-wrapper{
	display: flex;
	padding: 10px;
}

#dot-1{
	background-color: red;
}

#dot-2{
	background-color: green;
}

#dot-3{
	background-color: blue;
}

.browser-dot{
	background-color: black;
	height: 15px;
	width: 15px;
	border-radius: 50%;  /* full circle */
	margin: 5px;
}

.left-column {
	grid-area: left-column;
	padding-top:50px;
	padding-bottom: 50px;

}

#profile_pic{
	height: 200px;
	width: 200px;
	object-fit: cover;
	border: 2px solid var(--borderColor);

	display: block;
	margin: 0 auto;
}

#theme-options-wrapper{
	display: flex;
	justify-content: center;
}

.theme-dot{ 		/*how crazy that a div can become a circle.  a triangle?*/
	height: 30px;
	width: 30px;
	background-color: white;
	border-radius: 50%;

	margin: 5px;
	border: 2px solid var(--themeDotBorder);

	cursor: pointer;

}

.theme-dot:hover{
	border-width: 5px;
}

#light-mode{
	background-color: #fff;
}

#blue-mode{
	background-color: #239945;
}

#green-mode{
	background-color: #112321;
}

#purple-mode{
	background-color: purple;
}

#settings-note{
	font-size: 12px;
	font-style: italic;
	text-align: center;
}

.right-column {
	grid-area: right-column;
	display: grid;
	align-content: center;
	padding-top: 50px;
	padding-bottom: 50px;
}

#preview{
	width: 300px;
	border: 1.5px solid #123456;
	background-color: var(--shadowBg);
	padding:15px;
	position: relative;
}

#preview-shadow{
	background-color: var(--previewShadow);
	width: 300px;
	height: 120px;
	padding-left: 30px; /*this padding left and top pushes the #preview element, which is nested inside, down and to the right.*/
	padding-top: 30px;
}

.corner {			/*how crazy that a div can become a circle.*/
	width:7px;
	height: 7px;
	border-radius: 50%;
	border: 1.5px solid green;
	background-color:#fff;
	position: absolute;
}

#corner-tl{
	top: -5px;  /* this pushes the div dots up outside of the main seciont and into the margin*/
	left: -5px;  /*when top and left isn't set, the dots go to the corner of the main content.  But as soon as they are set, they are set relative to the corner of the padding.  that's strange.*/
}

#corner-tr{
	top: -5px;
	right: -5px;
}

#corner-bl{
	bottom: -5px;
	left: -5px;
}

#corner-br{
	bottom: -5px;
	right: -5px;
}

.about-wrapper{
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(32px, 1fr));
	/* this says "fit as many columns as you can"
}

@media screen and (max-width: 1200px) {
	.main-container{
		width:95%;
	}
}

@media screen and (max-width: 800px) {
	.intro-wrapper{
		grid-template-columns: 1fr;   
		grid-template-areas:  
			'nav-wrapper'
			'left-column'
			'right-column';
	}/* it is in media queries that css grids really shine!!!  easily re-align everything. remember, these media queries overwrite any of the same properties that were used earlier, but do not override other properties that were set earlier.*/
}	.right-column{
		justify-content: center;
}


/* I love how all the css is in perfect chronological order.   boxes inside of boxes, top to bottom, left to right.*/